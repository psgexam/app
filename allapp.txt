-------------------------------------------------------------------------------------------------------------------
BMI Calculator using React
-------------------------------------------------------------------------------------------------------------------

STEPS:
npx create-react-native-app ex1
cd ex1

---------
App.js
---------
import React, { Component } from 'react'
import { View, Text, TouchableOpacity, TextInput, StyleSheet } from 'react-native'
class Inputs extends Component {
state = {
height: '',
weight: '',
bmi: '',
BmiResult: '', }
handleHeight = (text) => {
this.setState({ height: text })}
handleWeight = (text) => {
this.setState({ weight: text }) }
calculate = (height, weight) => {
var result = (parseFloat(weight)*10000)/(parseFloat(height)*parseFloat(height));
result = result.toFixed(2);
this.setState({ bmi: result })
if(result<18.5){
this.setState({BmiResult:'Underweight'}) }
else if(result>=18.5&&result<25){
this.setState({BmiResult:'Normal weight'}) }
else if(result>=25&&result<30){
this.setState({BmiResult:'Overweight'}) }
else if(result>=30){
this.setState({BmiResult:'Obese'}) }
else{
alert('Incorrect Input!');
this.setState({BmiResult:''}) } }
render() {
return (

<View style = {styles.container}>
<Text style={styles.title}>BMI Calculator</Text>
<Text style = {styles.label}>Height</Text>
<TextInput style = {styles.input}
underlineColorAndroid = "transparent"
placeholder = "Height (Cm)"
autoCapitalize = "none"
onChangeText = {this.handleHeight}/>
<Text style = {styles.label}>Weight</Text>
<TextInput style = {styles.input}
underlineColorAndroid = "transparent"
placeholder = "Weight (Kg)"
autoCapitalize = "none"
onChangeText = {this.handleWeight}/>
<TouchableOpacity
style = {styles.submitButton}
onPress = {
() => this.calculate(this.state.height, this.state.weight)
}>
<Text style = {styles.submitButtonText}> Calculate </Text>
</TouchableOpacity>
<Text style = {styles.output}>{this.state.bmi}</Text>
<Text style = {styles.resultText}>{this.state.BmiResult}</Text>
</View>
) } }
export default Inputs
const styles = StyleSheet.create({
container: {
paddingTop: 23, },
input: {

margin: 15,
height: 40,
borderWidth: 1,
padding: 10, },
submitButton: {
backgroundColor: '#1562ab',
padding: 10,
margin: 15,
height: 40, },
submitButtonText:{
textAlign: "center",
color: 'white',
fontSize: 18, },
output:{
textAlign: "center",
fontSize: 30, },
title:{
paddingTop:30,
paddingBottom:10,
textAlign: "center",
fontSize: 30,
fontWeight:"bold", },
resultText:{
paddingTop:20,
paddingBottom:10,
textAlign: "center",
fontSize: 30,
color: 'blue' },
label:{
marginLeft: 15, } })


Execution:
npm run android
-------------------------------------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------------------------------------
Unit Conversion (CM to Miles.....) using React
-------------------------------------------------------------------------------------------------------------------

STEPS:
npx create-react-native-app unitconversion
cd unitconversion
npm install react-native-paper

---------
App.js
---------
import React, { useState } from 'react';
import { SafeAreaView, TouchableOpacity, StyleSheet, TextInput, Text, View } from 'react-native';
import { RadioButton } from 'react-native-paper';
export default function App() {
 const [myval, setVal] = useState('');
 const [result, setResult] = useState('');
 const [conversionType, setConversionType] = useState('');
 const calculate = () => {
 if (!myval || isNaN(myval) || !conversionType) {
 setResult('Please enter a valid number and select a conversion type');
 return;
 }
 let convertedValue = 0;
 switch (conversionType) {
 case 'in-to-cm':
 convertedValue = (parseFloat(myval) * 2.54).toFixed(3);
 setResult(`${convertedValue} cm`);
 break;
 case 'mile-to-km':
 convertedValue = (parseFloat(myval) *1.609344).toFixed(3);
 setResult(`${convertedValue} km`);
 break;
 case 'feet-to-m':
 convertedValue = (parseFloat(myval) * 0.305).toFixed(3);
 setResult(`${convertedValue} m`);
 break;
 case 'pound-to-kg':
 convertedValue = (parseFloat(myval) * 0.454).toFixed(3);
 setResult(`${convertedValue} kg`);
 break;
 default:
 setResult('Please select a valid conversion type');
 return; }};
 const conversionOptions = [
 { label: 'Inches to CentiMeters', value: 'in-to-cm' },
 { label: 'Miles to KiloMeters', value: 'mile-to-km' },
 { label: 'Feet-to-Meters', value: 'feet-to-m' },
 { label: 'Pounds-to-Kg', value: 'pound-to-kg' }
 ];
 const renderConversionOptions = () => {
 return (
 <>
 <Text style={styles.label}>Select Conversion Type</Text>
 {conversionOptions.map((option) => (
 <RadioButton.Item
 key={option.value}
 label={option.label}
 value={option.value}
 color="black"
 labelStyle={{
 color: 'red'
 }}
 status={conversionType === option.value ? 'checked' : 'unchecked'}
 onPress={() => setConversionType(option.value)}
 /> )) }
 </> ); };
 return (
 <SafeAreaView style={styles.container}>
 <View style={styles.container}>
 <Text style={styles.title}>Imperial Calculator</Text>
 {renderConversionOptions()}
 <TextInput
 style={styles.input}
 keyboardType="numeric"
 underlineColorAndroid="transparent"
 placeholder="Enter value"
 autoCapitalize="none"
 onChangeText={(text) => setVal(text)} />
 <TouchableOpacity
 style={styles.submitButton}
 onPress={() => calculate()} >
 <Text style={styles.submitButtonText}> Calculate </Text>
 </TouchableOpacity>
 <Text style={styles.output}>Output value</Text>
 <Text style={styles.resultText}>{result}</Text>
 </View>
 </SafeAreaView> ); }
const styles = StyleSheet.create({
 container: {
 paddingTop: 23,
 },
 input: {
 margin: 15,
 height: 40,
 borderWidth: 1,
 padding: 10,
 },

submitButton: {
 backgroundColor: '#5f52eb',
 padding: 10,
 margin: 15,
 height: 40, },
 submitButtonText: {
 textAlign: 'center',
 color: 'white',
 fontSize: 18, },
 output: {
 textAlign: 'center',
 fontSize: 30,},
 title: {
 paddingTop: 30,
 paddingBottom: 10,
 textAlign: 'center',
 fontSize: 30,
 fontWeight: 'bold', },
 resultText: {
 paddingTop: 20,
 paddingBottom: 10,
 textAlign: 'center',
 fontSize: 30,
 color: 'blue', },
 label: {
 marginLeft: 15, }, });


Execution:
npm run android
-------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------
Expense Manager using React
-------------------------------------------------------------------------------------------------------------------

STEPS:
npx create-react-native-app expense
cd expense

---------
App.js
---------
import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet, FlatList } from 'react-native';

const WeeklyTracker = () => {
  const [dailyEntries, setDailyEntries] = useState([]);
  const [dailyAmount, setDailyAmount] = useState('');
  const [selectedDay, setSelectedDay] = useState('');

  const addEntry = () => {
    if (dailyAmount && selectedDay) {
      const newEntry = {
        day: selectedDay,
        amount: parseFloat(dailyAmount),
      };

      setDailyEntries([...dailyEntries, newEntry]);
      setDailyAmount('');
      setSelectedDay('');
    }
  };

  const calculateWeeklyTotal = () => {
    return dailyEntries.reduce((total, entry) => total + entry.amount, 0);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Weekly Income Expense Tracker</Text>

      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          placeholder="Amount"
          keyboardType="numeric"
          value={dailyAmount}
          onChangeText={(text) => setDailyAmount(text)}
        />
        <TextInput
          style={styles.input}
          placeholder="Day (e.g., Monday)"
          value={selectedDay}
          onChangeText={(text) => setSelectedDay(text)}
        />
        <Button title="Add Entry" onPress={addEntry} />
      </View>

      <View style={styles.entriesContainer}>
        <Text style={styles.entriesHeader}>Weekly Entries</Text>
        <FlatList
          data={dailyEntries}
          keyExtractor={(item, index) => index.toString()}
          renderItem={({ item }) => (
            <View style={styles.entryItem}>
              <Text>{`${item.day}: $${item.amount.toFixed(2)}`}</Text>
            </View>
          )}
        />
      </View>

      <View style={styles.summaryContainer}>
        <Text style={styles.summaryText}>Weekly Total:</Text>
        <Text style={styles.totalAmount}>{`$${calculateWeeklyTotal().toFixed(2)}`}</Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    alignItems: 'center',
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  inputContainer: {
    width: '100%',
    marginBottom: 20,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    padding: 10,
  },
  entriesContainer: {
    width: '100%',
    marginBottom: 20,
  },
  entriesHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  entryItem: {
    marginBottom: 10,
  },
  summaryContainer: {
    alignItems: 'center',
  },
  summaryText: {
    fontSize: 18,
    marginBottom: 10,
  },
  totalAmount: {
    fontSize: 24,
    fontWeight: 'bold',
  },
});

export default WeeklyTracker;


Execution:
npm run android
-------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------
ToDo List using React
-------------------------------------------------------------------------------------------------------------------

STEPS:
npx create-react-native-app todo
cd todo

---------
App.js
---------
import React, { useState } from 'react';
import { View, Text, TextInput, Button, FlatList, TouchableOpacity, StyleSheet } from 'react-native';

const TodoList = () => {
  const [tasks, setTasks] = useState([]);
  const [taskText, setTaskText] = useState('');

  const addTask = () => {
    if (taskText.trim() !== '') {
      setTasks([...tasks, { id: Math.random().toString(), text: taskText, completed: false }]);
      setTaskText('');
    }
  };

  const toggleTask = (taskId) => {
    setTasks((prevTasks) =>
      prevTasks.map((task) =>
        task.id === taskId ? { ...task, completed: !task.completed } : task
      )
    );
  };

  const removeTask = (taskId) => {
    setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Todo List</Text>

      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          placeholder="Enter your task"
          value={taskText}
          onChangeText={(text) => setTaskText(text)}
        />
        <Button title="Add Task" onPress={addTask} />
      </View>

      <FlatList
        style={styles.taskList}
        data={tasks}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity
            onPress={() => toggleTask(item.id)}
            onLongPress={() => removeTask(item.id)}
          >
            <View style={styles.taskItem}>
              <Text style={item.completed ? styles.completedText : styles.taskText}>
                {item.text}
              </Text>
            </View>
          </TouchableOpacity>
        )}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    alignItems: 'center',
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  inputContainer: {
    width: '100%',
    marginBottom: 20,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    padding: 10,
  },
  taskList: {
    width: '100%',
  },
  taskItem: {
    padding: 15,
    marginBottom: 10,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
  },
  taskText: {
    fontSize: 16,
  },
  completedText: {
    fontSize: 16,
    textDecorationLine: 'line-through',
    color: 'gray',
  },
});

export default TodoList;



Execution:
npm run android
-------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------
Login using Cordova
-------------------------------------------------------------------------------------------------------------------

STEPS:
npm install -g cordova
cordova create login
cd login
cordova platform add android

---------
www/index.html
---------
<!DOCTYPE html>
<html>
<head>
    <title>Login Page</title>
    <link rel="stylesheet" type="text/css" href="css/index.css">
</head>
<body>
    <div class="container">
        <h2>Login</h2>
        <input type="text" id="username" placeholder="Username"/>
        <input type="password" id="password" placeholder="Password"/>
        <button onclick="login()">Login</button>
    </div>
    <script type="text/javascript" src="js/index.js"></script>
</body>
</html>

---------
www/css/index.css
---------
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}
.container {
    max-width: 300px;
    padding: 20px;
    border-radius: 10px;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    text-align: center;
}
.container h2 {
    margin-bottom: 20px;
    color: #333;
}
input {
    width: calc(100% - 20px);
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 5px;
}
button {
    width: calc(100% - 20px);
    padding: 12px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;   }
button:hover {
    background-color: #45a049;
}

---------
www/js/index.js
---------
function login() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
     if (username=="sample" &&  password=="1234") {
        alert('Login Success');    }
    else{
        alert('Please enter correct details');
    }}



Execution:
cordova build android
cordova run android
-------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------
Location using Cordova
-------------------------------------------------------------------------------------------------------------------

STEPS:
npm install -g cordova
cordova create location
cd location
cordova platform add android
cordova plugin add cordova-plugin-geolocation


---------
config.xml
---------
<?xml version='1.0' encoding='utf-8'?>
<widget id="com.example.mygeoapp" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
    <name>MyGeoApp</name>
    <description>Sample Apache Cordova App</description>
    <author email="dev@cordova.apache.org" href="https://cordova.apache.org">
        Apache Cordova Team
    </author>
    <content src="index.html" />
    <allow-intent href="http://*/*" />
    <allow-intent href="https://*/*" />
<rootElement xmlns:android="http://schemas.android.com/apk/res/android">
<platform name="android">
    <edit-config file="AndroidManifest.xml" mode="merge" target="/manifest/application">
        <application android:label="@string/app_name" android:icon="@mipmap/ic_launcher">
            <activity android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale" android:label="@string/activity_name" android:launchMode="singleTop" android:name="MainActivity" android:theme="@android:style/Theme.DeviceDefault.NoActionBar" android:windowSoftInputMode="adjustResize">
                <meta-data android:name="WebIntentPluginVersion" android:value="0.3.5" />
            </activity>
        </application>
    </edit-config>
    <allow-intent href="http://*/*" />
    <allow-intent href="https://*/*" />
    <access origin="*"/>
    <allow-intent href="geo:*"/>
    <preference name="permissions" default="none"/>
</platform>

<platform name="android">
    <config-file parent="/manifest" target="AndroidManifest.xml">
        <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    </config-file>
    <config-file parent="/manifest" target="AndroidManifest.xml">
        <uses-feature android:name="android.hardware.location.gps" />
    </config-file>
</platform>

</rootElement>
</widget>


---------
www/index.html
---------
<!DOCTYPE html>
<html>
<head>
    <title>Location App</title>
    <style>
        body {
            text-align: center;
            font-family: Arial, sans-serif;
        }
        #map {
            width: 100%;
            height: 300px;
        }
    </style>
</head>
<body>
    <h1>Current Location</h1>
    <div id="map"></div>
    <button id="getLocation">Get Location</button>
    <script src="cordova.js"></script>
    <script src="js/index.js"></script>
</body>
</html>

---------
www/js/index.js
---------
document.addEventListener("deviceready", onDeviceReady, false);

function onDeviceReady() {
    var getLocationButton = document.getElementById("getLocation");
    getLocationButton.addEventListener("click", getLocation);
}

function getLocation() {
    var options = {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 0
    };

    function success(position) {
        var latitude = position.coords.latitude;
        var longitude = position.coords.longitude;

        var mapDiv = document.getElementById("map");
        mapDiv.innerHTML = "Latitude: " + latitude + "<br>Longitude: " + longitude;
    }

    function error(err) {
        alert("Error getting location: " + err.message);
    }

    navigator.geolocation.getCurrentPosition(success, error, options);
}


Execution:
cordova build android
cordova run android
-------------------------------------------------------------------------------------------------------------------

